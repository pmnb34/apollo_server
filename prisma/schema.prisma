// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // 유저
  id        Int      @id @default(autoincrement())
  cuid      String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role     Role    @default(USER)
  email    String? @unique
  username String?
  password String?

  kakaoId                 String? @unique
  refreshToken            String?
  refreshTokenExpiredTime String?

  profile Profile?
  point   Point?

  loginHistory LoginHistory[]
  feed         Feed[]
  comment      Comment[]
  like         Like[]
  view         View[]

  followers  User[] @relation("follow")
  followings User[] @relation("follow")

  blocked  User[] @relation("block")
  blocking User[] @relation("block")

  report Report[]
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String?
  avatar       String?
  introduction String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Point {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body Int @default(0) // 총 보유 포인트

  history PointHistory[]

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model PointHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  body Int @default(0) // 포인트 변화량

  point   Point @relation(fields: [pointId], references: [id])
  feed    Feed  @relation(fields: [feedId], references: [id])
  pointId Int
  feedId  Int
}

model LoginHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  ipAddress String
  userAgent String
}

model Feed {
  id        Int      @id @default(autoincrement())
  cuid      String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  body   String
  images String[] @default([])
  tags   Tag[]
  location Location[]

  isPublic  Boolean @default(true) // 공개, 삭제
  isPrivate Boolean @default(false) // 전체, 개인

  comment Comment[]
  like    Like[]
  view    View[]

  report       Report[]
  pointHistory PointHistory[]
}


model View {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feed   Feed @relation(fields: [feedId], references: [id])
  user   User @relation(fields: [userId], references: [id])
  feedId Int  @unique
  userId Int  @unique
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feed   Feed @relation(fields: [feedId], references: [id])
  user   User @relation(fields: [userId], references: [id])
  feedId Int  @unique
  userId Int  @unique
}

model Tag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  feed Feed[]
}
model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  latitude String @unique
  longitude String @unique

  feed Feed[]
}



model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body String

  isPublic  Boolean @default(true) // 공개, 삭제
  isPrivate Boolean @default(false) // 전체댓글, 비밀댓글

  user   User @relation(fields: [userId], references: [id])
  feed   Feed @relation(fields: [feedId], references: [id])
  userId Int
  feedId Int
}

model Report {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  body     String
  isPublic Boolean @default(true)

  user   User @relation(fields: [userId], references: [id])
  feed   Feed @relation(fields: [feedId], references: [id])
  userId Int
  feedId Int
}
